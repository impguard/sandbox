#!/usr/bin/env bash

SOURCE=${SOURCE:-challenge.hs}

CONTEXT=$(dirname "${BASH_SOURCE[0]}")
DOCKERFILE="$CONTEXT/Dockerfile"
DOCKERIMAGE='haskell:fork'
DOCKERNAME='haskell'

function build.image ()
{
    if [ -z "$(docker images -q "$DOCKERIMAGE")" ]; then
        docker build -t "$DOCKERIMAGE" -f "$DOCKERFILE" "$CONTEXT"
    fi
}

function start ()
{
    build.image
    if ! docker ps | grep -q $DOCKERNAME; then
        docker run -d --rm --name $DOCKERNAME \
            --workdir /workspace \
            --volume "$(pwd)":/workspace \
            "$DOCKERIMAGE" /bin/bash -c 'trap : TERM INT; sleep infinity & wait'
    fi
}

function exec () {
    start
    command exec docker exec -it $DOCKERNAME "$@"
}

bake_task init "Initialize the project"
function init ()
{
    docker pull haskell:8.2.1
}

bake_task repl "Start a haskell repl"
function repl ()
{
    exec ghci
}

bake_task shell "Shell into the haskell environment"
function shell ()
{
    exec /bin/bash
}

bake_task compile "Compiles the provided haskell source file"
function compile ()
{
    local filename output
    filename="$(basename "$SOURCE")"
    output="${filename%.*}.out"
    exec ghc --make -o "$output" "$filename"
}

bake_task run "Runs the compiled haskell source file"
function run ()
{
    local filename output
    filename="$(basename "$SOURCE")"
    output="${filename%.*}.out"

    if [ ! -f "$output" ]; then
        bake_echo_red 'Please compile first:'
        bake_echo_yellow "  bake compile $SOURCE"
        return 1
    fi

    exec ./"$output" "$@"
}

bake_task clean "Cleans up generated files and the docker environment"
function clean ()
{
    rm -f ./*.hi ./*.o ./*.out
    docker stop $DOCKERNAME >/dev/null 2>&1
    bake_echo_green 'Removed output and stopped haskell container'
}
